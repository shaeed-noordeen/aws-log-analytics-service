name: Terraform Plan (Reusable)

on:
  workflow_call:
    inputs:
      terraform_dir:
        description: Path to the Terraform configuration directory.
        required: true
        type: string
      checkov_directory:
        description: Path to run Checkov against (defaults to terraform_dir when empty).
        required: false
        type: string
        default: ""
      plan_title:
        description: Title used for the PR plan comment.
        required: false
        type: string
        default: "Terraform Plan"

jobs:
  plan:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    env:
      TERRAFORM_DIR: ${{ inputs.terraform_dir }}
      CHECKOV_DIR: ${{ inputs.checkov_directory != '' && inputs.checkov_directory || inputs.terraform_dir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Checkov on Terraform
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ env.CHECKOV_DIR }}
          framework: terraform
          soft_fail: true

      - name: Terraform Init
        run: terraform -chdir="${{ env.TERRAFORM_DIR }}" init

      - name: Terraform Validate
        run: terraform -chdir="${{ env.TERRAFORM_DIR }}" validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir="${{ env.TERRAFORM_DIR }}" plan -no-color -out=tfplan.binary
          terraform -chdir="${{ env.TERRAFORM_DIR }}" show -no-color tfplan.binary > tfplan.txt

          {
            echo 'plan<<EOF'
            cat tfplan.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.plan }}
          PLAN_TITLE: ${{ inputs.plan_title }}
        with:
          script: |
            const plan = process.env.PLAN_OUTPUT || 'Plan output unavailable.';
            const title = process.env.PLAN_TITLE || 'Terraform Plan';
            const body = [
              `#### ${title}`,
              '',
              '```',
              plan,
              '```',
              `*Pushed by: @${context.actor}, Action: \`${context.eventName}\`*`,
            ].join('\n');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });
